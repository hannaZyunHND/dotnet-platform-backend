@using MI.Entity.Enums;
@using PlatformWEBAPI.Services.Zone.ViewModal
@using PlatformWEBAPI.Services.Article.ViewModel
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Http
@using PlatformWEBAPI.Services.Article.Repository
@using PlatformWEBAPI.Services.Zone.Repository
@inject IHttpContextAccessor HttpContextAccessor
@inject IArticleRepository articleRepository;
@inject IZoneRepository zoneRepository;
@using Utils
@{
    var culture = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.TwoLetterISOLanguageName.ToLower();
    var culture_code = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.ToString();
    var base_uri_culture = "/" + culture;
    var domain = Context.Request.Host.ToString();
    var title = ViewBag.Title;
    var zone_id = ViewBag.ZoneId;
    //var list_zone_parents = zoneRepository.GetListZoneByParentId((int)TypeZone.AllButProduct, culture_code);
    var breadcrumbs = zoneRepository.GetBreadcrumbByZoneId(zone_id, culture_code);
}
@await Component.InvokeAsync("SEO_Breadcrumb", new { bread = breadcrumbs, page = "", type_page = "" })
<div class="container">
    <ol class="breadcrumb">
        <li class=""><a href="/">Home</a></li>
        @foreach (var item in breadcrumbs)
        {
            var link_tar = "/" + item.Url;
            <li class=""><a href="@link_tar">@item.Name</a></li>

        }
        @if (!string.IsNullOrEmpty(title))
        {
            <li class="">@title.Replace(";", " - ")</li>
        }
    </ol>
</div>
