@using PlatformWEB.Services.Product.Repository
@using PlatformWEB.Services.Product.ViewModel
@using PlatformWEB.Services.Zone.Repository
@using PlatformWEB.Services.Zone.ViewModal
@using MI.Entity.Enums

@using PlatformWEB.Services.Zone.ViewModal
@using PlatformWEB.Services.Article.ViewModel
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Http
@using PlatformWEB.Services.Article.Repository
@using PlatformWEB.Utility
@inject IHttpContextAccessor HttpContextAccessor
@inject ICookieUtility cookieUtility

@using Utils
@{
    var culture = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.TwoLetterISOLanguageName.ToLower();
    var culture_code = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.ToString();
    var base_uri_culture = "/" + culture;
    var domain = Context.Request.Host.ToString();
    cookieUtility.SetCookieDefault();
    var location_id = int.Parse(HttpContextAccessor.HttpContext.Request.Cookies["_LocationId"]);
    var location_name = HttpContextAccessor.HttpContext.Request.Cookies["_LocationName"];
}
@inject IProductRepository productRepository
@inject IZoneRepository zoneRepository

@{
    var region_id = ViewBag.Region as int?;
    var old_url = ViewBag.UrlOld as string;
    var url = ViewBag.Url as string;
}
@{
    var page_size = 15;
    var page_index = 1;
    var total_first_child_1 = 0;
    var products_in_first_child = productRepository.GetProductInRegionByZoneIdMinify((int)region_id, location_id, culture_code, page_index, page_size, out total_first_child_1);

}

@if (total_first_child_1 > 0)
{
    var cutted_row = new List<ProductMinify>();
    var row_index = 1;
    var row_size = 5;
    decimal number_of_row = total_first_child_1 / row_size;
    if (total_first_child_1 > 0)
    {
        <div class="set-total" data-total="@total_first_child_1" data-id="@((int)region_id)" data-url="@LinkRedirectUrlUtility.RegionUrl(url)" style="display:none"></div>
        @while (row_index <= number_of_row || (number_of_row < 1 && row_index <= 1))
        {
            var row_cutted_all = products_in_first_child.Skip((row_index - 1) * row_size).Take(row_size);

            @foreach (var item in row_cutted_all)
            {
                var link_ta = string.Format("/{0}.html", item.Url);
                <div class="swiper-slide products-slide__item products-grid__item">
                    @await Component.InvokeAsync("ItemProduct", new { pr = item , isLazy = false })
                </div>
            }



            @*<div class="row no-gutters">
                <div class="col-lg-5 col-md-12 col-sm-12 col-12">
                    <div class="row no-gutters">
                        @foreach (var item in row_cutted_left)
                        {
                            //var link_ta = string.Format("{0}/{1}.p{2}.html", base_uri_culture, item.Url, item.ProductId);
                            var link_ta = string.Format("/{0}.html", item.Url);
                            <div class="col-md-6 col-sm-6 col-6">
                                @await Component.InvokeAsync("ItemProduct", new { pr = item, isLazy = false })
                            </div>
                        }
                    </div>
                </div>
                <div class="col-lg-7 col-md-12 col-sm-12 col-12">
                    <div class="row no-gutters">
                        @{
                            var checkmobile = 1;
                        }
                        @foreach (var item in row_cutted_right)
                        {
                            //var link_ta = string.Format("{0}/{1}.p{2}.html", base_uri_culture, item.Url, item.ProductId);
                            var link_ta = string.Format("/{0}.html", item.Url);
                            <div class="col-md-4 col-sm-4 col-6 @(checkmobile%3==0?"d-none d-sm-block":"")">
                                @await Component.InvokeAsync("ItemProduct", new { pr = item, isLazy = false })
                            </div>
                            checkmobile++;
                        }
                    </div>
                </div>
            </div>*@
            row_index++;
        }
    }

}
