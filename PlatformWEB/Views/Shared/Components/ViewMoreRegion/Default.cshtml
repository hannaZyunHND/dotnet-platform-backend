@using PlatformWEB.Services.Product.ViewModel;
@using Utils;
@model List<ProductMinify>;
@using MI.Entity.Enums;
@using PlatformWEB.Services.Zone.ViewModal
@using PlatformWEB.Services.Article.ViewModel
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Http
@using PlatformWEB.Services.Article.Repository
@using PlatformWEB.Services.Zone.Repository
@inject IHttpContextAccessor HttpContextAccessor
@inject IArticleRepository articleRepository;
@inject IZoneRepository zoneRepository;
@using Utils
@{
    var culture = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.TwoLetterISOLanguageName.ToLower();
    var culture_code = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.ToString();
    var base_uri_culture = "/" + culture;
    var domain = Context.Request.Host.ToString();
}

@{
    var size = ViewBag.Total;
    var item_left = 2;
    var item_right = 3;
    var item_in_row = item_left + item_right;
    var number_of_page = size / item_in_row + 1;
}

@{
    var list_product = Model;
    var id = ViewBag.Id;
    var list_cutted = new List<List<ProductMinify>>();

    for (int i = 0; i < number_of_page; i++)
    {
        var r = Model.Skip(i * item_in_row).Take(item_in_row).ToList();
        list_cutted.Add(r);
    }
}

@if (list_cutted != null)
{
    foreach (var item_root in list_cutted)
    {
        var cut_left_item = item_root.Skip(0).Take(item_left);
        var cut_right_item = item_root.Skip(item_left).Take(item_right);
        <div class="row no-gutters mb-3 mb-md-0 clone-row">
            <div class="col-lg-5 col-md-12 col-sm-12 col-12">
                <div class="row no-gutters">
                    @foreach (var item in cut_left_item)
                    {
                        //var link_tar = Url.Action("ProductDetail", "Product", new { product_id = item.ProductId });
                        var link_tar = string.Format("/{0}.html", item.Url);
                    <div class="col-md-6 col-sm-6 col-6">
                        @await Component.InvokeAsync("ItemProduct", new { pr = item, isLazy = false })
                    </div>
                    }
                </div>
            </div>
            <div class="col-lg-7 col-md-12 col-sm-12 col-12">
                <div class="row no-gutters h-100 ">
                    @foreach (var item in cut_right_item)
                    {

                        var link_tar = string.Format("/{0}.html", item.Url);
                    <div class="col-md-4 col-sm-4 col-6">
                        @await Component.InvokeAsync("ItemProduct", new { pr = item, isLazy = false })
                    </div>
                    }
                </div>
            </div>
        </div>
    }
}
